1	#define N 2
2	byte init_data[8];
3	byte size=8;
4	mtype={ack};
5	
6	proctype proc (byte my_id, next_id, previous_id; chan to_next, from_previous, to_receiver)
7	{ 
8		byte my_data[N]; 
9		byte received[size];
10		byte pwd[N];
11		byte i=0, j=0, k=0, l=0, m=0, n=0, o=0, p=0, big=0, index=0;
12		mtype a;
13		
14		do
15			// initialise the data into each processes array
16			:: i<N -> my_data[i] = init_data[my_id*N + i]; i++ 
17			:: i==N -> break
18		od;
19	
20		do
21		:: j<size ->
22				if
23				// first send the number residing in the processes own data
24				:: o<1 -> to_next ! my_data[k]; received[l]=my_data[k]; k++; l++; o++; j++;
25				// receive the number sent from the previous process
26				:: o==1 & (j+1)%4 > 0 -> from_previous ? received[l]; o++; 
27				// send the number that was previously received to the proceeding process
28				:: o==2 & (j+1)%4 > 0 -> to_next ! received[l];	o--; j++; l++; 
29				// once three numbers are received, equalling 4 total, the process repeats
30				:: (j+1)%4==0	& o != 0  -> from_previous ? received[l]; l++; j++; o=0; 				
31				fi
32		:: else -> do		
33			//check the largest of every 4 numbers received and assign each to the final password array
34			:: index < size -> 		if
35					:: (index+1)%4==0 -> 
36							if
37							:: big <= received[index] -> big=received[index]; pwd[m]=big; big=0; m++; index++;		
38							:: else -> pwd[m]=big; big=0; m++; index++;		
39							fi
40					:: big <= received[index] & (index+1)%4 > 0 -> big=received[index]; index++;
41					:: big  > received[index] & (index+1)%4 > 0 -> index++;
42					fi
43			// send the password to the receiver
44			:: n<N & index==size -> to_receiver ! pwd[n]; n++
45			od
46		od
47				
48	}
49	
50	proctype receiver (chan from_A, from_B, from_C, from_D)
51	{ 
52		byte result[N];
53		byte a=0, b=0, c=0, d=0, i=0, prevInd = 0, resultInd = 0;
54		byte initIndex = 0;
55		byte pass[4];
56		byte passInd = 0;
57		byte checkInd = 0;
58		byte recBig = 0;
59		byte ind=N;
60	
61		byte index=0;
62	
63		do
64		:: i<N ->
65			if
66			// if the receiver has received a number from a process it can then only receive numbers from that process
67			:: b==0 & c==0 & d==0 -> from_A ? result[a]; a++; i++;
68			:: a==0 & c==0 & d==0 -> from_B ? result[b]; b++; i++;
69			:: a==0 & b==0 & d==0 -> from_C ? result[c]; c++; i++;
70			:: a==0 & b==0 & c==0 -> from_D ? result[d]; d++; i++;
71			fi
72		:: else -> break;
73		od; 
74	
75		// These calculations are purely for correctness requirements and do not effect the numbers received by the receiver
76		do		
77		:: resultInd < N -> 		if
78				:: passInd == 3 ->  	pass[passInd] = init_data[initIndex]; 
79						do		
80						:: checkInd < 4 -> 		if
81								:: checkInd == 3 -> if
82										:: recBig <= pass[checkInd] -> recBig=pass[checkInd]; 
83											assert(recBig == result[resultInd]); prevInd++; initIndex = prevInd; 
84													passInd=0; resultInd++; recBig=0; checkInd=0; break;
85										:: recBig > pass[checkInd] -> assert(recBig == result[resultInd]); prevInd++; initIndex = prevInd; 
86													passInd=0; resultInd++; recBig=0; checkInd=0; break;
87										fi
88								:: checkInd < 3 & recBig <= pass[checkInd] -> recBig=pass[checkInd]; checkInd++;	
89								:: checkInd < 3 & recBig > pass[checkInd] -> checkInd++;	
90								fi
91						od
92				:: passInd < 3 -> pass[passInd] = init_data[initIndex]; initIndex = initIndex + ind; passInd++;
93				fi
94		od
95	}
96	
97	// emulated channel between each process and receiver
98	proctype channel(chan in, out) 
99	{	
100		byte z;
101		end:
102		do
103		:: in ? z -> progress: out ! z
104		od
105	}
106	
107	init {
108		chan AtoR = [N] of {byte}; chan BtoR = [N] of {byte}; chan CtoR = [N] of {byte}; chan DtoR= [N] of {byte}; 
109	
110		chan AtoChan = [1] of {byte}; chan ChantoB = [1] of {byte}; chan BtoChan = [1] of {byte}; chan ChantoC= [1] of {byte};
111		chan CtoChan = [1] of {byte}; chan ChantoD = [1] of {byte}; chan DtoChan = [1] of {byte}; chan ChantoA = [1] of {byte};
112		chan ChantoR= [1] of {byte};
113	
114		atomic
115		{
116			init_data[0]=2;init_data[1]=0;init_data[2]=5;init_data[3]=8;
117			init_data[4]=4;init_data[5]=1;init_data[6]=3;init_data[7]=9;
118			/*init_data[8]=2;init_data[9]=0;init_data[10]=5;init_data[11]=8;
119			init_data[12]=4;init_data[13]=1;init_data[14]=3;init_data[15]=9;
120			init_data[16]=2;init_data[17]=0;init_data[18]=5;init_data[19]=8;
121			init_data[20]=4;init_data[21]=1;init_data[22]=3;init_data[23]=9;
122			init_data[24]=2;init_data[25]=0;init_data[26]=5;init_data[27]=8;
123			init_data[28]=4;init_data[29]=1;init_data[30]=3;init_data[31]=9;
124			init_data[32]=2;init_data[33]=0;init_data[34]=5;init_data[35]=8;
125			init_data[36]=4;init_data[37]=1;init_data[38]=3;init_data[39]=9;
126			init_data[40]=2;init_data[41]=0;init_data[42]=5;init_data[43]=8;
127			init_data[44]=4;init_data[45]=1;init_data[46]=3;init_data[47]=9;
128			init_data[48]=2;init_data[49]=0;init_data[50]=5;init_data[51]=8;
129			init_data[52]=4;init_data[53]=1;init_data[54]=3;init_data[55]=9;
130			init_data[56]=2;init_data[57]=0;init_data[58]=5;init_data[59]=8;
131			init_data[60]=4;init_data[61]=1;init_data[62]=3;init_data[23]=9;
132			init_data[64]=2;init_data[65]=0;init_data[66]=5;init_data[67]=8;
133			init_data[68]=4;init_data[69]=1;init_data[70]=3;init_data[71]=9;
134			init_data[72]=2;init_data[73]=0;init_data[74]=5;init_data[75]=8;
135			init_data[76]=4;init_data[77]=1;init_data[78]=3;init_data[79]=9;*/
136	
137			run proc (0,1,3,AtoChan,ChantoA,AtoR); run channel(AtoChan, ChantoB);
138			run proc (1,2,0,BtoChan,ChantoB,BtoR); run channel(BtoChan, ChantoC);
139			run proc (2,3,1,CtoChan,ChantoC,CtoR); run channel(CtoChan, ChantoD); 
140			run proc (3,0,2,DtoChan,ChantoD,DtoR); run channel(DtoChan, ChantoA);
141			run receiver (AtoR,BtoR,CtoR,DtoR)
142		}
143	}

